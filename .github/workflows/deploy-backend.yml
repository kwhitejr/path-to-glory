name: Deploy Backend

on:
  push:
    branches:
      - main
    paths:
      - 'packages/backend/**'
      - 'packages/shared/**'
      - 'infrastructure/backend/**'
      - '.github/workflows/deploy-backend.yml'
      - 'package-lock.json'
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '20'

jobs:
  deploy:
    name: Build and Deploy Backend
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build shared package
        run: npm run build -w @path-to-glory/shared

      - name: Bundle backend with esbuild
        run: npm run bundle -w @path-to-glory/backend

      - name: Package Lambda functions
        run: |
          cd packages/backend

          # Create deployment packages from bundled code
          cd dist

          # Package GraphQL Lambda
          zip -r ../lambda.zip index.mjs
          echo "GraphQL Lambda package size: $(du -h ../lambda.zip | cut -f1)"

          # Package Image Service Lambda
          zip -r ../lambda-images.zip images.mjs
          echo "Image Service Lambda package size: $(du -h ../lambda-images.zip | cut -f1)"

          cd ..

          # Verify contents
          echo ""
          echo "GraphQL Lambda contents:"
          unzip -l lambda.zip

          echo ""
          echo "Image Service Lambda contents:"
          unzip -l lambda-images.zip

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-duration-seconds: 1200
          role-skip-session-tagging: true

      - name: Verify AWS credentials
        run: |
          echo "Testing AWS credentials and role assumption..."
          aws sts get-caller-identity
          echo "‚úì AWS credentials verified"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        run: |
          cd infrastructure/backend
          terraform init

      - name: Terraform Plan
        run: |
          cd infrastructure/backend
          terraform plan -out=tfplan

      - name: Terraform Apply
        run: |
          cd infrastructure/backend
          terraform apply -auto-approve tfplan

      - name: Get API URLs
        id: outputs
        run: |
          cd infrastructure/backend
          GRAPHQL_URL=$(terraform output -raw graphql_url)
          IMAGES_URL=$(terraform output -raw images_upload_url)
          BUCKET_NAME=$(terraform output -raw images_bucket_name)

          echo "graphql_url=$GRAPHQL_URL" >> $GITHUB_OUTPUT
          echo "images_url=$IMAGES_URL" >> $GITHUB_OUTPUT

          echo "### üöÄ Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**GraphQL Endpoint:** $GRAPHQL_URL" >> $GITHUB_STEP_SUMMARY
          echo "**Image Upload Endpoint:** $IMAGES_URL" >> $GITHUB_STEP_SUMMARY
          echo "**S3 Images Bucket:** $BUCKET_NAME" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Test GraphQL:" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "curl -X POST $GRAPHQL_URL \\" >> $GITHUB_STEP_SUMMARY
          echo '  -H "Content-Type: application/json" \' >> $GITHUB_STEP_SUMMARY
          echo '  -d '"'"'{"query":"{ factions { id name } }"}'"'"'' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### Test Image Upload (get presigned URL):" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "curl -X POST $IMAGES_URL \\" >> $GITHUB_STEP_SUMMARY
          echo '  -H "Content-Type: application/json" \' >> $GITHUB_STEP_SUMMARY
          echo '  -d '"'"'{"filename":"test.jpg","contentType":"image/jpeg","entityType":"army","entityId":"test-123"}'"'"'' >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Smoke test
        run: |
          cd infrastructure/backend
          GRAPHQL_URL=$(terraform output -raw graphql_url)
          echo "Testing GraphQL endpoint: $GRAPHQL_URL"
          echo ""

          # Wait for DNS propagation and API Gateway to be ready
          echo "Waiting for API Gateway to be ready (up to 5 minutes)..."
          MAX_RETRIES=10
          RETRY_DELAY=30

          for i in $(seq 1 $MAX_RETRIES); do
            echo "Attempt $i/$MAX_RETRIES..."

            # Use -f to fail on HTTP errors, -s for silent, -S to show errors
            RESPONSE=$(curl -f -s -S -X POST "$GRAPHQL_URL" \
              -H "Content-Type: application/json" \
              -d '{"query":"{ factions { id name } }"}' 2>&1) && SUCCESS=true || SUCCESS=false

            if [ "$SUCCESS" = true ]; then
              echo "Response: $RESPONSE"

              # Check if response contains data
              if echo "$RESPONSE" | grep -q '"data"'; then
                echo ""
                echo "‚úÖ Smoke test passed!"
                exit 0
              else
                echo "‚ö†Ô∏è  Got response but no data field. Response: $RESPONSE"
              fi
            else
              echo "‚ö†Ô∏è  Request failed: $RESPONSE"
            fi

            if [ $i -lt $MAX_RETRIES ]; then
              echo "Waiting ${RETRY_DELAY}s before retry..."
              sleep $RETRY_DELAY
            fi
          done

          echo ""
          echo "‚ùå Smoke test failed after $MAX_RETRIES attempts"
          echo "This may be due to DNS propagation delay or API Gateway setup."
          echo "The deployment was successful - try testing manually in a few minutes:"
          echo "  curl -X POST $GRAPHQL_URL -H 'Content-Type: application/json' -d '{\"query\":\"{ factions { id name } }\"}'"
          exit 1

      - name: Smoke test image upload endpoint
        run: |
          cd infrastructure/backend
          IMAGES_URL=$(terraform output -raw images_upload_url)
          echo "Testing Image Upload endpoint: $IMAGES_URL"
          echo ""

          # Wait for API Gateway to be ready
          echo "Waiting for API Gateway to be ready..."
          MAX_RETRIES=5
          RETRY_DELAY=10

          for i in $(seq 1 $MAX_RETRIES); do
            echo "Attempt $i/$MAX_RETRIES..."

            RESPONSE=$(curl -f -s -S -X POST "$IMAGES_URL" \
              -H "Content-Type: application/json" \
              -d '{"filename":"test.jpg","contentType":"image/jpeg","entityType":"army","entityId":"test-123"}' 2>&1) && SUCCESS=true || SUCCESS=false

            if [ "$SUCCESS" = true ]; then
              echo "Response: $RESPONSE"

              # Check if response contains uploadUrl
              if echo "$RESPONSE" | grep -q '"uploadUrl"'; then
                echo ""
                echo "‚úÖ Image upload endpoint smoke test passed!"
                exit 0
              else
                echo "‚ö†Ô∏è  Got response but no uploadUrl field. Response: $RESPONSE"
              fi
            else
              echo "‚ö†Ô∏è  Request failed: $RESPONSE"
            fi

            if [ $i -lt $MAX_RETRIES ]; then
              echo "Waiting ${RETRY_DELAY}s before retry..."
              sleep $RETRY_DELAY
            fi
          done

          echo ""
          echo "‚ö†Ô∏è  Image upload endpoint smoke test incomplete after $MAX_RETRIES attempts"
          echo "The deployment was successful - the endpoint may need a few more minutes."
          echo "Test manually:"
          echo "  curl -X POST $IMAGES_URL -H 'Content-Type: application/json' -d '{\"filename\":\"test.jpg\",\"contentType\":\"image/jpeg\",\"entityType\":\"army\",\"entityId\":\"test-123\"}'"
          echo ""
          echo "Note: This is a warning, not a failure."
          exit 0
