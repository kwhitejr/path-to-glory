name: Deploy Frontend

on:
  push:
    branches:
      - main
    paths:
      - 'packages/frontend/**'
      - 'packages/shared/**'
      - '.github/workflows/deploy-frontend.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'packages/frontend/**'
      - 'packages/shared/**'
      - 'infrastructure/frontend/**'
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  NODE_VERSION: '20'

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  build:
    name: Build Frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build shared package
        run: npm run build -w @path-to-glory/shared

      - name: Build frontend
        run: npm run build -w @path-to-glory/frontend
        env:
          VITE_GRAPHQL_ENDPOINT: https://ptg.kwhitejr.com/graphql

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: packages/frontend/dist
          retention-days: 1

  terraform-validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: infrastructure/frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.7

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Format Check
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        run: terraform init -backend=false

      - name: Terraform Validate
        run: terraform validate

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [build, terraform-validate]
    defaults:
      run:
        working-directory: infrastructure/frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.7

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true

      - name: Comment PR with Plan
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          script: |
            const output = `#### Terraform Plan 📖

            <details><summary>Show Plan</summary>

            \`\`\`terraform
            ${process.env.PLAN}
            \`\`\`

            </details>`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [build, terraform-validate]
    environment:
      name: production
      url: https://ptg.kwhitejr.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.7
          terraform_wrapper: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        working-directory: infrastructure/frontend
        run: terraform init

      - name: Terraform Apply
        working-directory: infrastructure/frontend
        run: terraform apply -auto-approve

      - name: Get Terraform Outputs
        id: tf-outputs
        working-directory: infrastructure/frontend
        run: |
          echo "s3_bucket=$(terraform output -raw s3_bucket_name)" >> $GITHUB_OUTPUT
          echo "cloudfront_id=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_OUTPUT

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: dist

      - name: Sync to S3
        run: |
          aws s3 sync dist/ s3://${{ steps.tf-outputs.outputs.s3_bucket }}/ \
            --delete \
            --cache-control "public, max-age=31536000, immutable" \
            --exclude "index.html"

          # Don't cache index.html
          aws s3 cp dist/index.html s3://${{ steps.tf-outputs.outputs.s3_bucket }}/index.html \
            --cache-control "public, max-age=0, must-revalidate"

      - name: Invalidate CloudFront Cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ steps.tf-outputs.outputs.cloudfront_id }} \
            --paths "/*"

      - name: Deployment Summary
        run: |
          echo "✅ Frontend deployed successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🌐 URL: https://ptg.kwhitejr.com" >> $GITHUB_STEP_SUMMARY
          echo "📦 S3 Bucket: ${{ steps.tf-outputs.outputs.s3_bucket }}" >> $GITHUB_STEP_SUMMARY
          echo "🚀 CloudFront Distribution: ${{ steps.tf-outputs.outputs.cloudfront_id }}" >> $GITHUB_STEP_SUMMARY
