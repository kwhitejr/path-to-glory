"""
A user of the application (authenticated via Google OAuth)
"""
type User {
  id: ID!
  email: String!
  name: String!
  picture: String
  googleId: String!
  createdAt: String!
  campaigns: [Campaign!]!
  armies: [Army!]!
  customWarscrolls: [CustomWarscroll!]!
}

"""
A Path to Glory campaign containing multiple armies
"""
type Campaign {
  id: ID!
  name: String!
  ownerId: ID!
  owner: User!
  createdAt: String!
  armies: [Army!]!
  battles: [Battle!]!
}

"""
A faction in Age of Sigmar
"""
type Faction {
  id: ID!
  name: String!
  grandAlliance: String!
  startingGlory: Int!
  startingRenown: Int!
  description: String
}

"""
An army/warband belonging to a player in a campaign
"""
type Army {
  id: ID!
  campaignId: ID!
  campaign: Campaign!
  playerId: ID!
  player: User!
  factionId: ID!
  faction: Faction!
  name: String!
  heraldry: String
  imageUrl: String
  realmOfOrigin: RealmOfOrigin
  battleFormation: String
  glory: Int!
  renown: Int!
  background: String
  notableEvents: String
  currentQuest: String
  questPoints: Int!
  completedQuests: [String!]!
  spellLore: [String!]!
  prayerLore: [String!]!
  manifestationLore: [String!]!
  warlord: Unit
  units: [Unit!]!
  createdAt: String!
  updatedAt: String!
}

"""
A unit within an army (includes both Warlord and regular units)
"""
type Unit {
  id: ID!
  armyId: ID!
  army: Army!
  unitTypeId: String!
  name: String!
  imageUrl: String
  warscroll: String!
  size: Int!
  wounds: Int!
  rank: String!
  renown: Int!
  reinforced: Boolean!
  isWarlord: Boolean!
  veteranAbilities: [String!]!
  injuries: [String!]!
  enhancements: [String!]!
  pathAbilities: [String!]!
  createdAt: String!
  updatedAt: String!
}

"""
A battle record between armies
"""
type Battle {
  id: ID!
  campaignId: ID!
  campaign: Campaign!
  armies: [ID!]!
  outcome: BattleOutcome!
  gloryAwarded: [GloryAward!]!
  notes: String
  playedAt: String!
  createdAt: String!
}

"""
Glory points awarded to an army from a battle
"""
type GloryAward {
  armyId: ID!
  amount: Int!
  reason: String
}

"""
A custom user-created warscroll
"""
type CustomWarscroll {
  id: ID!
  name: String!
  subtitle: String
  factionId: String!
  creatorId: ID!
  creator: User!
  characteristics: UnitCharacteristics!
  rangedWeapons: [Weapon!]
  meleeWeapons: [Weapon!]
  abilities: [WarscrollAbility!]!
  keywords: UnitKeywords!
  battleProfile: BattleProfile
  createdAt: String!
  updatedAt: String!
}

"""
Weapon profile for a warscroll
"""
type Weapon {
  name: String!
  range: String
  attacks: String!
  hit: String!
  wound: String!
  rend: String!
  damage: String!
  ability: String
}

"""
Ability on a warscroll
"""
type WarscrollAbility {
  name: String!
  timing: String!
  description: String
  declare: String
  effect: String!
  keywords: [String!]
}

"""
Unit characteristics (move, health, save, control)
"""
type UnitCharacteristics {
  move: String
  health: Int!
  save: String
  control: Int
  banishment: String
}

"""
Unit keywords (unit and faction)
"""
type UnitKeywords {
  unit: [String!]!
  faction: [String!]!
}

"""
Battle profile (points, unit size, base size)
"""
type BattleProfile {
  unitSize: String!
  points: Int!
  baseSize: String
  isManifestation: Boolean
  isFactionTerrain: Boolean
}

"""
Battle outcome types
"""
enum BattleOutcome {
  VICTORY
  DEFEAT
  DRAW
}

"""
The eight Mortal Realms of Age of Sigmar
"""
enum RealmOfOrigin {
  AQSHY
  CHAMON
  GHUR
  GHYRAN
  HYSH
  SHYISH
  ULGU
  AZYR
}

# Queries
type Query {
  """
  Get current authenticated user
  """
  me: User

  """
  Get a specific campaign
  """
  campaign(id: ID!): Campaign

  """
  Get all campaigns for the current user
  """
  myCampaigns: [Campaign!]!

  """
  Get a specific army
  """
  army(id: ID!): Army

  """
  Get all armies for the current user across all campaigns
  """
  myArmies: [Army!]!

  """
  Get all available factions
  """
  factions: [Faction!]!

  """
  Get a specific faction
  """
  faction(id: ID!): Faction

  """
  Get all custom warscrolls (from all users)
  """
  customWarscrolls: [CustomWarscroll!]!

  """
  Get custom warscrolls created by the current user
  """
  myCustomWarscrolls: [CustomWarscroll!]!

  """
  Get a specific custom warscroll
  """
  customWarscroll(id: ID!): CustomWarscroll
}

# Mutations
type Mutation {
  """
  Create a new campaign
  """
  createCampaign(input: CreateCampaignInput!): Campaign!

  """
  Create a new army in a campaign
  """
  createArmy(input: CreateArmyInput!): Army!

  """
  Update army details
  """
  updateArmy(id: ID!, input: UpdateArmyInput!): Army!

  """
  Delete an army and all its units
  """
  deleteArmy(id: ID!): Boolean!

  """
  Add a unit to an army
  """
  addUnit(armyId: ID!, input: AddUnitInput!): Unit!

  """
  Update a unit
  """
  updateUnit(id: ID!, input: UpdateUnitInput!): Unit!

  """
  Remove a unit from an army
  """
  removeUnit(id: ID!): Boolean!

  """
  Add a veteran ability to a unit
  """
  addVeteranAbility(unitId: ID!, ability: String!): Unit!

  """
  Record a battle
  """
  recordBattle(input: RecordBattleInput!): Battle!

  """
  Create a custom warscroll
  """
  createCustomWarscroll(input: CreateCustomWarscrollInput!): CustomWarscroll!

  """
  Update a custom warscroll (creator only)
  """
  updateCustomWarscroll(id: ID!, input: UpdateCustomWarscrollInput!): CustomWarscroll!

  """
  Delete a custom warscroll (creator only)
  """
  deleteCustomWarscroll(id: ID!): Boolean!
}

# Input Types
input CreateCampaignInput {
  name: String!
}

input CreateArmyInput {
  campaignId: ID!
  factionId: ID!
  name: String!
  heraldry: String
  imageUrl: String
  realmOfOrigin: RealmOfOrigin
  battleFormation: String
  background: String
  warlordUnitId: String
  spellLore: [String!]
  prayerLore: [String!]
  manifestationLore: [String!]
}

input UpdateArmyInput {
  name: String
  heraldry: String
  imageUrl: String
  realmOfOrigin: RealmOfOrigin
  battleFormation: String
  glory: Int
  renown: Int
  background: String
  notableEvents: String
  currentQuest: String
  questPoints: Int
  completedQuests: [String!]
  spellLore: [String!]
  prayerLore: [String!]
  manifestationLore: [String!]
}

input AddUnitInput {
  unitTypeId: String!
  name: String!
  imageUrl: String
  warscroll: String!
  size: Int!
  wounds: Int!
  rank: String!
  renown: Int!
  reinforced: Boolean!
  isWarlord: Boolean!
  pathAbilities: [String!]
}

input UpdateUnitInput {
  name: String
  imageUrl: String
  warscroll: String
  size: Int
  wounds: Int
  rank: String
  renown: Int
  reinforced: Boolean
  isWarlord: Boolean
  veteranAbilities: [String!]
  injuries: [String!]
  enhancements: [String!]
  pathAbilities: [String!]
}

input RecordBattleInput {
  campaignId: ID!
  armies: [ID!]!
  outcome: BattleOutcome!
  gloryAwarded: [GloryAwardInput!]!
  notes: String
  playedAt: String!
}

input GloryAwardInput {
  armyId: ID!
  amount: Int!
  reason: String
}

# Custom Warscroll Input Types
input WeaponInput {
  name: String!
  range: String
  attacks: String!
  hit: String!
  wound: String!
  rend: String!
  damage: String!
  ability: String
}

input WarscrollAbilityInput {
  name: String!
  timing: String!
  description: String
  declare: String
  effect: String!
  keywords: [String!]
}

input UnitCharacteristicsInput {
  move: String
  health: Int!
  save: String
  control: Int
  banishment: String
}

input UnitKeywordsInput {
  unit: [String!]!
  faction: [String!]!
}

input BattleProfileInput {
  unitSize: String!
  points: Int!
  baseSize: String
  isManifestation: Boolean
  isFactionTerrain: Boolean
}

input CreateCustomWarscrollInput {
  name: String!
  subtitle: String
  factionId: String!
  characteristics: UnitCharacteristicsInput!
  rangedWeapons: [WeaponInput!]
  meleeWeapons: [WeaponInput!]
  abilities: [WarscrollAbilityInput!]!
  keywords: UnitKeywordsInput!
  battleProfile: BattleProfileInput
}

input UpdateCustomWarscrollInput {
  name: String
  subtitle: String
  factionId: String
  characteristics: UnitCharacteristicsInput
  rangedWeapons: [WeaponInput!]
  meleeWeapons: [WeaponInput!]
  abilities: [WarscrollAbilityInput!]
  keywords: UnitKeywordsInput
  battleProfile: BattleProfileInput
}
